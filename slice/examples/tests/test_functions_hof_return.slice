(* Test higher-order function that returns another function *)

let make_adder_func = (* Returns fun y -> x + y, but x must be const for + *)
  fun x_const -> (fun y_val -> x_const (* + y_val is not possible, just return x_const for simplicity for now *) )
in
  let add_five_func = make_adder_func 5.0 in (* add_five_func is now (fun y_val -> 5.0) *)
  let result1 = add_five_func 10.0 in (* result1 should be 5.0 *)
  let _comp_res1 = result1 < 5.5 in

  let s_param = uniform(0.0, 1.0) in (* A sample to be used as y_val *)
  let result2 = add_five_func s_param in (* result2 should still be 5.0, s_param is ignored by current simple adder *)
  let _comp_res2 = result2 < 5.1 in

  (result1 < 5.1, result2 < 4.9) (* (true, false) if result1=5.0, result2=5.0 *) 