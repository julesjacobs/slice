(* Test DistrCase where branches are Sample expressions,
   and the DistrCase itself is subject to discretization bounds. *)

let x = discrete(
  0.5 : gaussian(0.0, 1.0),  (* Branch 1 is Sample *)
  0.5 : uniform(10.0, 11.0) (* Branch 2 is Sample *)
) in

(* This comparison should influence the BoundBag of x's type.
   'elab' will determine a type for x (TFloat(b,c)).
   The comparison 'x < 5.0' should make 'b' Finite.
   'discretize(x_texpr)' should then ideally produce a NEW DistrCase
   for 'x' based on the intervals from 'x < 5.0', where the
   probabilities for these intervals are calculated by considering
   the weighted outcomes of the inner samples.

   If 'discretize' for DistrCase simply recurses on branches,
   the output for 'x' might be:
   discrete(0.5 : gaussian(0.0, 1.0), 0.5 : uniform(10.0, 11.0))
   which would mean x's own Finite BoundBag (from x < 5.0) was ignored
   for restructuring 'x' itself.
*)
let _comparison = x < 5.0 in

(* Final expression to evaluate *)
0.1 < x 